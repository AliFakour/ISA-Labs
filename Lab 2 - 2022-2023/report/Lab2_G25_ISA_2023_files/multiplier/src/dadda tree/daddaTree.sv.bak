module daddaTree import globals ::*; (
	input wire signed [24:0][7:0]PP,
	output wire [48:0]C,
	output wire [48:0]S );

	wire signed [32:0][7:0] l3;
	wire signed [32:0][4:0] l2;
	wire signed [32:0][4:0] l1;

	// zero paddding inputs, fill from the LSB the PP to make the shift
	assign l3[32:0][0] = {8'b00000000, PP[24:0][0]};
	assign{[32:0][1]l3} = 7'b0000000 & [24:0][1]PP & 1'b0;
	assign{[32:0][2]l3} = 6'b000000 & [24:0][2]PP & 2'b00;
	assign{[32:0][3]l3} = 5'b00000 & [24:0][3]PP & 3'b000;
	assign{[32:0][4]l3} = 4'b0000 & [24:0][4]PP & 4'b0000;
	assign{[32:0][5]l3} = 3'b000 & [24:0][5]PP & 5'b00000;
	assign{[32:0][6]l3} = 2'b00 & [24:0][6]PP & 6'b000000;
	assign{[32:0][7]l3} = 1'b0 & [24:0][7]PP & 7'b0000000;

	// ---------------------------------------------- layer 2; 8 -> 5 ----------------------------------------------

	ha ha_0(.x1([5][0]l3), .x2([5][1]l3), .S([5][0]l2, .C([6][1]l2));	// c5
	ha ha_1(.x1([6][3]l3), .x2([6][4]l3), .S([6][2]l2, .C([7][3]l2));	// c6
	ha ha_2(.x1([7][5]l3), .x2([7][6]l3), .S([7][2]l2, .C([8][3]l2));	// c7 
	ha ha_3(.x1([25][6]l3), .x2([25][7]l3), .S([25][3]l2, .C([26][4]l2));	// c25
	
	compressor_3_2 c3_2_0(.Cin([6][0]l3), .x1([6][1]l3), .x2([6][2]l3), .C([7][1]l2), .S([6][0]l2));	// c6
	compressor_3_2 c3_2_1(.Cin([8][5]l3), .x1([8][6]l3), .x2([8][7]l3), .C([9][4]l2), .S([8][4]l2));	// c8
	compressor_3_2 c3_2_2(.Cin([9][5]l3), .x1([9][6]l3), .x2([9][7]l3), .C([10][4]l2), .S([9][3]l2));
	compressor_3_2 c3_2_3(.Cin([10][5]l3), .x1([10][6]l3), .x2([10][7]l3), .C([11][4]l2), .S([10][3]l2));
	compressor_3_2 c3_2_4(.Cin([11][5]l3), .x1([11][6]l3), .x2([11][7]l3), .C([12][4]l2), .S([11][3]l2));
	compressor_3_2 c3_2_5(.Cin([12][5]l3), .x1([12][6]l3), .x2([12][7]l3), .C([13][4]l2), .S([12][3]l2));
	compressor_3_2 c3_2_6(.Cin([13][5]l3), .x1([13][6]l3), .x2([13][7]l3), .C([14][4]l2), .S([13][3]l2));
	compressor_3_2 c3_2_7(.Cin([14][5]l3), .x1([14][6]l3), .x2([14][7]l3), .C([15][4]l2), .S([14][3]l2));
	compressor_3_2 c3_2_8(.Cin([15][5]l3), .x1([15][6]l3), .x2([15][7]l3), .C([16][4]l2), .S([15][3]l2));
	compressor_3_2 c3_2_9(.Cin([16][5]l3), .x1([16][6]l3), .x2([16][7]l3), .C([17][4]l2), .S([16][3]l2));
	compressor_3_2 c3_2_10(.Cin([17][5]l3), .x1([17][6]l3), .x2([17][7]l3), .C([18][4]l2), .S([17][3]l2));
	compressor_3_2 c3_2_11(.Cin([18][5]l3), .x1([18][6]l3), .x2([18][7]l3), .C([19][4]l2), .S([18][3]l2));
	compressor_3_2 c3_2_12(.Cin([19][5]l3), .x1([19][6]l3), .x2([19][7]l3), .C([20][4]l2), .S([19][3]l2));
	compressor_3_2 c3_2_13(.Cin([20][5]l3), .x1([20][6]l3), .x2([20][7]l3), .C([21][4]l2), .S([20][3]l2));
	compressor_3_2 c3_2_14(.Cin([21][5]l3), .x1([21][6]l3), .x2([21][7]l3), .C([22][4]l2), .S([21][3]l2));
	compressor_3_2 c3_2_15(.Cin([22][5]l3), .x1([22][6]l3), .x2([22][7]l3), .C([23][4]l2), .S([22][3]l2));
	compressor_3_2 c3_2_16(.Cin([23][5]l3), .x1([23][6]l3), .x2([23][7]l3), .C([24][4]l2), .S([23][3]l2));
	compressor_3_2 c3_2_17(.Cin([24][5]l3), .x1([24][6]l3), .x2([24][7]l3), .C([25][4]l2), .S([24][3]l2)); // c24
	compressor_3_2 c3_2_18(.Cin([26][2]l3), .x1([26][3]l3), .x2([26][4]l3), .C([27][1]l2), .S([26][2]l2));
	compressor_3_2 c3_2_19(.Cin([26][5]l3), .x1([26][6]l3), .x2([26][7]l3), .C([27][4]l2), .S([26][3]l2)); // c26
	compressor_3_2 c3_2_19(.Cin([27][3]l3), .x1([27][4]l3), .x2([27][5]l3), .C([28][2]l2), .S([27][1]l2)); // c27

	compressor_4_2 c4_2_0(.Tin([7][0]l3), .x1([7][1]l3), .x2([7][2]l3), .x3([7][3]l3), .x4([7][4]l3), .Tout([8][2]l2), .C([8][1]l2), .S([7][0]l2));	// c7
	compressor_4_2 c4_2_1(.Tin([8][0]l3), .x1([8][1]l3), .x2([8][2]l3), .x3([8][3]l3), .x4([8][4]l3), .Tout([9][2]l2), .C([9][1]l2), .S([8][0]l2));	// c8
	compressor_4_2 c4_2_2(.Tin([9][0]l3), .x1([9][1]l3), .x2([9][2]l3), .x3([9][3]l3), .x4([9][4]l3), .Tout([10][2]l2), .C([10][1]l2), .S([9][0]l2));
	compressor_4_2 c4_2_3(.Tin([10][0]l3), .x1([10][1]l3), .x2([10][2]l3), .x3([10][3]l3), .x4([10][4]l3), .Tout([11][2]l2), .C([11][1]l2), .S([10][0]l2));
	compressor_4_2 c4_2_4(.Tin([11][0]l3), .x1([11][1]l3), .x2([11][2]l3), .x3([11][3]l3), .x4([11][4]l3), .Tout([12][2]l2), .C([12][1]l2), .S([11][0]l2));
	compressor_4_2 c4_2_5(.Tin([12][0]l3), .x1([12][1]l3), .x2([12][2]l3), .x3([12][3]l3), .x4([12][4]l3), .Tout([13][2]l2), .C([13][1]l2), .S([12][0]l2));
	compressor_4_2 c4_2_6(.Tin([13][0]l3), .x1([13][1]l3), .x2([13][2]l3), .x3([13][3]l3), .x4([13][4]l3), .Tout([14][2]l2), .C([14][1]l2), .S([13][0]l2));
	compressor_4_2 c4_2_7(.Tin([14][0]l3), .x1([14][1]l3), .x2([14][2]l3), .x3([14][3]l3), .x4([14][4]l3), .Tout([15][2]l2), .C([15][1]l2), .S([14][0]l2));
	compressor_4_2 c4_2_8(.Tin([15][0]l3), .x1([15][1]l3), .x2([15][2]l3), .x3([15][3]l3), .x4([15][4]l3), .Tout([16][2]l2), .C([16][1]l2), .S([15][0]l2));
	compressor_4_2 c4_2_9(.Tin([16][0]l3), .x1([16][1]l3), .x2([16][2]l3), .x3([16][3]l3), .x4([16][4]l3), .Tout([17][2]l2), .C([17][1]l2), .S([16][0]l2));
	compressor_4_2 c4_2_10(.Tin([17][0]l3), .x1([17][1]l3), .x2([17][2]l3), .x3([17][3]l3), .x4([17][4]l3), .Tout([18][2]l2), .C([18][1]l2), .S([17][0]l2));
	compressor_4_2 c4_2_11(.Tin([18][0]l3), .x1([18][1]l3), .x2([18][2]l3), .x3([18][3]l3), .x4([18][4]l3), .Tout([19][2]l2), .C([19][1]l2), .S([18][0]l2));
	compressor_4_2 c4_2_12(.Tin([19][0]l3), .x1([19][1]l3), .x2([19][2]l3), .x3([19][3]l3), .x4([19][4]l3), .Tout([20][2]l2), .C([20][1]l2), .S([19][0]l2));
	compressor_4_2 c4_2_13(.Tin([20][0]l3), .x1([20][1]l3), .x2([20][2]l3), .x3([20][3]l3), .x4([20][4]l3), .Tout([21][2]l2), .C([21][1]l2), .S([20][0]l2));
	compressor_4_2 c4_2_14(.Tin([21][0]l3), .x1([21][1]l3), .x2([21][2]l3), .x3([21][3]l3), .x4([21][4]l3), .Tout([22][2]l2), .C([22][1]l2), .S([21][0]l2));
	compressor_4_2 c4_2_15(.Tin([22][0]l3), .x1([22][1]l3), .x2([22][2]l3), .x3([22][3]l3), .x4([22][4]l3), .Tout([23][2]l2), .C([23][1]l2), .S([22][0]l2));
	compressor_4_2 c4_2_16(.Tin([23][0]l3), .x1([23][1]l3), .x2([23][2]l3), .x3([23][3]l3), .x4([23][4]l3), .Tout([24][2]l2), .C([24][1]l2), .S([23][0]l2));
	compressor_4_2 c4_2_17(.Tin([24][0]l3), .x1([24][1]l3), .x2([24][2]l3), .x3([24][3]l3), .x4([24][4]l3), .Tout([25][2]l2), .C([25][1]l2), .S([24][0]l2)); // c24
	compressor_4_2 c4_2_18(.Tin([25][1]l3), .x1([25][2]l3), .x2([25][3]l3), .x3([25][4]l3), .x4([25][5]l3), .Tout([26][2]l2), .C([26][1]l2), .S([25][0]l2)); // c25
	
	// ---------------------------------------------- layer 1; 5 -> 3 ----------------------------------------------


endmodule


